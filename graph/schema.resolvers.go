package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"crypto/rand"
	"fmt"
	"gqlexample/graph/model"
	"gqlexample/graph/subscriptions"
	"math/big"

	"go.uber.org/zap"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", randNumber),
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// AddMessage is the resolver for the addMessage field.
func (r *mutationResolver) AddMessage(ctx context.Context, input model.NewMessage) (*model.Message, error) {
	r.SubscriptionManager.Publish(subscriptions.Event{
		Topic:   subscriptions.TopicMessages,
		Channel: "sse",
		Payload: &model.Message{
			Text: input.Text,
		},
	})
	return &model.Message{
		Text: input.Text,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	return &model.Order{
		Id:           id,
		OrderId:      "order-" + id,
		InstrumentId: "instrument-" + id,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	return []*model.Order{
		{
			Id:           "1",
			OrderId:      "order-1",
			InstrumentId: "instrument-1",
		},
		{
			Id:           "2",
			OrderId:      "order-2",
			InstrumentId: "instrument-2",
		},
	}, nil
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, channel string) (<-chan *model.Message, error) {
	zap.L().Info("Subscribe to messageAdded", zap.String("channel", channel))
	sub, err := r.SubscriptionManager.Subscribe(ctx, subscriptions.TopicMessages, channel)
	if err != nil {
		zap.L().Error("Subscribe failed", zap.Error(err))
		return nil, err
	}

	// 创建类型特定的通道
	msgChan := make(chan *model.Message, 1)

	go func() {
		defer func() {
			close(msgChan)
		}()

		for {
			select {
			case payload := <-sub.Output:
				if msg, ok := payload.(*model.Message); ok {
					select {
					case msgChan <- msg:
					case <-ctx.Done():
						return
					}
				} else {
					zap.L().Error("Payload is not a message")
					return
				}
			case <-ctx.Done():
				return
			}
		}
	}()

	return msgChan, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
